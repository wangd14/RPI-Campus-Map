package hw8;

import java.util.Observable;
import java.util.Observer;

import hw4.Edge;
import hw7.Building;
import hw7.CampusPaths;
import javafx.scene.Group;
import javafx.scene.Node;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;
import javafx.scene.image.ImageView;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Line;
import javafx.stage.Popup;

public class CampusMapView implements Observer{
    private ImageView imageView;
    private Pane pane;
    
    private Button resetButton;
    private Button zoomInButton;
    private Button zoomOutButton;
    private Label messageLabel;
    
    @Override
    public void update(Observable obj, Object arg) {
    	if(arg instanceof ImageView) {
    		ImageView iv = (ImageView) arg;
    		imageView = iv;
    	}
    	if(arg instanceof Pane) {
    		Pane p = (Pane) arg;
    		pane = p;
    	}
    	if(arg instanceof Button) {
    		
    	}
	}
    
    private void handleCircleClicked(Circle circle, Pane pane, ImageView imageView) {
        if (selectedCircle1 == null) {
            selectedCircle1 = circle;
            System.out.println("First circle selected: " + circle.getId());
            
            for(Node n: pane.getChildren()) {
            	if(n instanceof Circle) {
            		Circle c = (Circle) n;
            		c.setFill(Color.RED);
            	}
            }
            
            for(Node n: pane.getChildren()) {
            	if(n instanceof Group) {
            		pane.getChildren().remove(n);
            		break;
            	}
            }
            circle.setFill(Color.BLUE);
        } else if (selectedCircle2 == null && circle != selectedCircle1) {
            selectedCircle2 = circle;
            System.out.println("Second circle selected: " + circle.getId());
            circle.setFill(Color.BLUE);
            // Call a function with the IDs of both circles
            
            cp.getDirection(selectedCircle1.getId(), selectedCircle2.getId());
            
            if(cp.getPath()!=null) {
            	double x = selectedCircle1.getLayoutX();
                double y = selectedCircle1.getLayoutY();
                Group group = new Group();
                for(Edge<Building, Double> e: cp.getPath().getPath()) {
                	double nextX = MAX_IMAGE_WIDTH*((double)e.getDestVertex().getXCoord()/2057) -14;
                	double nextY = MAX_IMAGE_HEIGHT*((double)e.getDestVertex().getYCoord()/1921) -17;
                	Line l = new Line(x, y, nextX, nextY);
                	l.setFill(Color.ORANGE);
                	x = nextX;
                	y = nextY;
                	group.getChildren().add(l);
                }
                
                pane.getChildren().add(group);
                
                // Reset selected circles
                selectedCircle1.setFill(Color.GREEN);
                selectedCircle2.setFill(Color.GREEN);
                selectedCircle1 = null;
                selectedCircle2 = null;
                
            }
            else {
            	showPopup("No path found.");
            	        
            	for(Node n: pane.getChildren()) {
                	if(n instanceof Circle) {
                		Circle c = (Circle) n;
                		c.setFill(Color.RED);
                	}
                }
            	selectedCircle1 = null;
                selectedCircle2 = null;
            }
        }
    }

    public void showMap() {
    	
    }

    // Other methods to update the view as needed
}
